Start MongoDB Server: (open your terminal and enter the following): sudo mongod
Open Mongo Terminal: (open your terminal and enter the following): mongo


Show all databases available on our current MongoDB server	Example:
show dbs

Show current database selected	Example:
db


Change to another database
Note: If the database you're trying to switch to does not exist,
Mongo shell will create a new database and switch to it.	Pattern:
use DB_NAME


Collections~Records/Rows in RDB
View all collections in a MongoDB	Example:
show collections
Create a new collection in the current database	Pattern:
db.createCollection("COLLECTION_NAME")

Example:
db.createCollection("ninjas")
Destroy a collection 	Pattern:
db.COLLECTION_NAME.drop()

Example:
db.ninjas.drop()


Example:
use message_board_db


Delete database
Note: db.dropDatabase() will delete the current database in use.

Example:
use message_board_db
db.dropDatabase()

CRUD:
CREATE - Inserting a document into a collection:
// Pattern:
db.COLLECTION_NAME.insert({YOUR_JSON_DOCUMENT})

// Example:
db.ninjas.insert({name: "Trey", belt: "black", status: "awesome"})

READ - Retrieving documents from a collection:
To retrieve documents from your collections, you will use the following method.

// Pattern:
db.COLLECTION_NAME.find({YOUR_QUERY_DOCUMENT})
The parameter we pass to this method is a document. Everything in the document will match the fields in the database and only those documents that match the query document will be returned back from the query. Here's an example using the ninja document we just made.

// Example:
db.ninjas.find({name: "Trey"})
db.ninjas.find() or db.ninjas.({}) - find all ninja doc's

If you noticed, there is a field called _id on both records we put in the database. That is the MongoDB ObjectId, which MongoDB will automatically make for you if you do not specify a value for _id. To query by id, you have to do the following:

// Example:
db.ninjas.find({_id: ObjectId("5462a78e514e258182f4c69a")})
// Notice: You can't just pass the string of characters, you must pass it as an ObjectId.
HINT: if you want to sort by something like creation time in MongoDB, you can sort by ObjectId because it is made by using a time stamp as part of the string.

DESTROY - Removing documents from a collection:
To remove an item from the database, we would run the following syntax:

// Pattern:
db.COLLECTION_NAME.remove({YOUR_QUERY_DOCUMENT}, BOOLEAN)

// Example
db.ninjas.remove({belt: "yellow"})
db.ninjas.remove({belt: "yellow"}, false) // this query would have the same effect as the one above.
The query document is everything you want the deletion targets to match. The second parameter is a boolean, and it is OPTIONAL. If the parameter is omitted, it defaults to false. The boolean is called the justOne boolean, and if it is present and it is true, the remove query will only remove the first document that matches the query. Play around with this if it confuses you.

UPDATE - Updating documents in a collection:
The update syntax can be tricky if you do not see it done correctly first. Let's say I wanted to add a location to the ninja whose name is Trey. I want to make his location equal to Mountain View. I would try to the following:

// Example:
db.ninjas.update({name: "Trey"}, {location: "Mountain View"})
Then, to check to make sure if my update query was right, I'd run:

// Example:
db.ninjas.find({location: "Mountain View"}).pretty()



DESTROY - Removing documents from a collection:
To remove an item from the database, we would run the following syntax:

// Pattern:
db.COLLECTION_NAME.remove({YOUR_QUERY_DOCUMENT}, BOOLEAN)

// Example
db.ninjas.remove({belt: "yellow"})
db.ninjas.remove({belt: "yellow"}, false) // this query would have the same effect as the one above.
The query document is everything you want the deletion targets to match. The second parameter is a boolean, and it is OPTIONAL. If the parameter is omitted, it defaults to false. The boolean is called the justOne boolean, and if it is present and it is true, the remove query will only remove the first document that matches the query. Play around with this if it confuses you.

UPDATE - Updating documents in a collection:
The update syntax can be tricky if you do not see it done correctly first. Let's say I wanted to add a location to the ninja whose name is Trey. I want to make his location equal to Mountain View. I would try to the following:

// Example:
db.ninjas.update({name: "Trey"}, {location: "Mountain View"})
Then, to check to make sure if my update query was right, I'd run:

// Example:
db.ninjas.find({location: "Mountain View"}).pretty() 
